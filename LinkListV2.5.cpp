/*
	Title:?????????????
	TimeLine:2018.9.19
	Owner:????? 
	Details:
		9.19???? ???????? 
		1????********????????????????????????????BUG????????
		2????ElemType?????????????????ElemType????ÈÉ??????????????????????????
		9.20???? ???????? 
		3?? ???????§µ???????ú‘?????????????????void controller(LinkList &L,int x),?????????????? 
		4??	??????????????????(????int??????????InitFlag)??????????	
		5?? ??????????????????????????????????????????¦Ä?????????????
				????????????????case 6;
									int LocateElem_L(LinkList L,ElemType e);
									void mainTest(LinkList &L);
									etc....?? 
									
		6??	???????????????????¦Ä????	1???¦Ë?????					???????? 
											2???????????????????§Õ??		???????? 
											3???????????????????§Õ??		???????? 
																								?? 
		9.21????
		7?????????????????????????????????????????????????
		7.5?? ?????????§µ????????????????????¦¶????????????????????
			??§Ú?¦Ë????????????????????§à??????????? 
		8???????????????????????????????????????????????????emmmmmmmmm???§à?????????? 

*/

//-----------------?????????---------------------------------

 
#include <stdio.h>
#include <cstdlib>
#include <string.h>


//-----------------??????????---------------------------------  


//typedef int ElemType; //??????????????????int??????????????????????????? 

typedef int Status;	  //???????????????????????????

typedef struct{
	char num[10];
	char name[10];
	int grade;
}student;

typedef student ElemType;


typedef struct LNode{
	ElemType data;
	struct LNode *next = NULL;
}LNode,*LinkList;


//-----------------?????????????-------------------------------  


#define OK 1
#define ERROR 0
#define MAXSIZE 100


//-----------------???????????????-----------------------------


Status ClearList(LinkList &L);
Status InitList_L(LinkList &L);
Status DestoryList_L(LinkList &L);
Status GetElem_L(LinkList L,int i,ElemType &tmp);
Status ListInsertRandom_L(LinkList &L,ElemType e);
Status ListInsert_L(LinkList &L,int i,ElemType e);
Status ListDelete_L(LinkList &L,int i,ElemType &e);
int ListEmpty(LinkList L);
int ListLength_L(LinkList L);
int LocateElem_L(LinkList L,ElemType e);
void ShowAll(LinkList &L);
void mainTest(LinkList &L,LinkList &L2);
void controller(LinkList &L,int x);
LinkList LocateElem_L_EX(LinkList L,ElemType e,int &n);
void ConnectionList_L(LinkList &L,LinkList &L2);
void ClearListN(LinkList &L);
void DestoryList_LN(LinkList &L);
void CrushList_L(LinkList &L,LinkList &L2,char n);
Status InitList_LV1(LinkList &L,int n);
Status InitList_LV2(LinkList &L,int n);
//-----------------?????????????-----------------------------


int InitFlag = 0;	//???????????


//-----------------??????????????????????---------------------


int main(){
	LinkList L;
	LinkList L2;
	mainTest(L,L2);
	return 0;
}


//-----------------???????????------------------------------- 


void mainTest(LinkList &L,LinkList &L2){//????? 
	//??????????x,n?? 
	int x = 0;
	char n = 0;
	//???????????break???? 
	while(1){
	printf("\n          ????????????\n\n");
	printf("---------------------------------\n");
	//?????????????????????????BUG?????????¨À??????? 
	if(!InitFlag){
		printf("??????????????????????\n");
	}else if (InitFlag == 1){
		printf("????????????? %d\n",ListLength_L(L));
	}else{
		printf("??????1???????? %d\n",ListLength_L(L));
		printf("??????2??????:  %d\n",ListLength_L(L2));
	} 
	//????? 
	printf("---------------------------------\n");
	printf("??????????????????????\n");
	printf("1???????????\n");
	printf("2??????????¦Ë???\n");
	printf("3?????????¦Ë???\n");
	printf("4??????????¦Ë???\n");
	printf("5??????????¦Ë???\n");
	printf("6???????????????\n"); 
	printf("7?????????????\n");
	printf("8?????????????????????\n");
	printf("9????????????????\n");
	printf("10??????????\n");
	printf("0?????\n");
	printf("--------------------------------\n");
	//?????????? 
	printf("?????????????");
	scanf("%d",&x);
	//?????????????? 
	if(x == 0){
		//break??? 
		printf("--------------------------------\n");
		printf("???????\n");
		break;
	}
	else if(x == 1){
		//?????????? 
		printf("--------------------------------\n");
		if(!InitFlag){
			controller(L,1);
			printf("????????????????\n");
		}else if(InitFlag == 1){
			controller(L2,1);
			printf("????????????????\n");
		}
		
		printf("--------------------------------\n");
	}
	else if(x >=2 && x <=8){
		//?????????§Ó??????????????????????????? 
		printf("--------------------------------\n");
		if(!InitFlag){
			printf("??????????????????????\n");
		}else if(InitFlag == 1){
			controller(L,x);
		}else{
			fflush(stdin);
			printf("?????????Y????????????????????");
			scanf("%c",&n);
			fflush(stdin);
			if(n == 'y' || n == 'Y'){
				controller(L,x);
			}else{
				controller(L2,x);
			}
		} 
		printf("--------------------------------\n");
		
	}else if(x == 9){
		printf("--------------------------------\n");
		if(!InitFlag){
			printf("??????????????????????\n");
		}else if(InitFlag == 1){
			controller(L,x);
		}else{
			fflush(stdin);
			printf("?????????Y????????????????????");
			scanf("%c",&n);
			CrushList_L(L,L2,n);
			fflush(stdin);
			printf("?????????\n");
		}
		printf("--------------------------------\n");			
	}else if(x == 10){
		printf("--------------------------------\n");	
		if(InitFlag == 0){
		printf("??????????????????????\n");
		}
		else if(InitFlag == 1){
			printf("???????????????????????\n"); 
		}else if(InitFlag == 2){
			ConnectionList_L(L,L2);
		}else{
			InitFlag = 0;
			printf("???????????????BUG???????????????????\n");
		}
		printf("--------------------------------\n");	
	}else{
		printf("--------------------------------\n");	
		printf("????????????????\n");
		printf("--------------------------------\n");	
	}
	//??????????????????????????????????????????????getchar()??????????????????§»?? 
	system("pause");
	//???????? 
	system("cls");
	}
	return;
}


//-----------------???????????--------------------------------- 


void controller(LinkList &L,int x){
	switch(x){
		case 1:{//??????????????????????????????????????BUG?? 
			if(InitList_L(L)){
				printf("?????????????\n");
				InitFlag++;
			}else{
				if(InitFlag){
					printf("??????????????????????\n");
				}else{
					printf("???????????????????????Bug!\n");
				}
			}
			break;
		}
		case 2:{//????????????????????????????????Y/????????? 
			ElemType x;
			LinkList p;
			char flag='y';
			while(1){
				p = L;
				printf("\n");
				//????? 
				printf("??????????????????: ");
				scanf("%s",x.name);
				printf("?????????????????: ");
				scanf("%s",x.num);
				printf("????????????????: ");
				while(1){
				if(scanf("%d",&x.grade) && x.grade >=0 && x.grade <=100){//??????????????????¦¶?? 
						if(ListInsertRandom_L(p,x)){
							printf("???????\n\n");
							break;
						}else{
							printf("?????????????????BUG????\n\n");
							break;
						}
				}else{
					fflush(stdin);
					printf("??????????????\n");
					printf("????????????????:");
				}	
			}
				
				//?§Ø??????
				
				printf("?????????????????(y/other)  :");
				//???????????? 
				fflush(stdin);
				scanf("%c",&flag);
				fflush(stdin);
				//???? 
				if(flag == 'y' ||  flag == 'Y'){
					printf("---------------------------------\n");
				}else{
					break;
				}
			}
			break;
		}
		case 3:{//???¦Ë?¨°?????????????????????Y/????????? 
			ElemType x;
			LinkList p;
			char flag='y';
			int location;
			while(1){
				p = L;
				printf("\n");
				//????? 
				printf("??????????????????: ");
				fflush(stdin);
				scanf("%s",x.name);
				fflush(stdin);
				printf("?????????????????: ");
				fflush(stdin);
				scanf("%s",x.num);
				printf("????????????????: ");
				while(1){
					//?§Ø??????
					if(scanf("%d",&x.grade) && x.grade >=0 && x.grade <=100){
						//??¦Ë?? 
						printf("?????????¦Ë??:  ");
						scanf("%d",&location);
						printf("\n");
						if(ListInsert_L(p,location,x)){
							printf("???????\n\n");
							break;
						}else{
							printf("??????????????????????øA???????!\n\n");
							break;
						}
					}else{
						fflush(stdin);
						printf("??????????????\n");
						printf("????????????????:");
					}
				}	
				printf("?????????????????(y/other)  :");
				//???????????? 
				fflush(stdin);
				scanf("%c",&flag);
				fflush(stdin);
				//???? 
				if(flag == 'y' ||  flag == 'Y'){
					printf("---------------------------------\n");
				}else{
					break;
				}
			}
			break;
		}
		case 4:{//???¦Ë??????????????? 
			int location;
			ElemType tmp;
			printf("??????????????¦Ë??:");
			scanf("%d",&location);
			if(ListDelete_L(L,location,tmp)){
				printf("????????\n");
			}else{
				printf("??????????????????????øA???????!\n");
			}
			break;
		}
		case 5:{//???¦Ë????????????????? 
			int location;
			ElemType tmp;
			printf("??????????¦Ë???");
			scanf("%d",&location);
			if(GetElem_L(L,location,tmp)){
				printf("?????????????: \n????: %s,???: %s,???: %d\n",tmp.name,tmp.num,tmp.grade);
			}else{
				printf("??????????§Õ??????\n");
			}
			return;
			break;
		}
		case 6:{//???????????¦Ë????????????????????????????BUG???????????????????????= =?? 
			LinkList p;
			ElemType tmp;
			int sum = 0;
			int n;
			printf("????????????: \n");
			scanf("%s",tmp.name);
			p = LocateElem_L_EX(L,tmp,n);
			if(p){
				sum += n;
				printf("????????????????%d??¦Ë??",sum);
				p = p->next;
				while(p){
					p = LocateElem_L_EX(p,tmp,n);
					if(p){
						sum += n;
						printf("????%d??¦Ë??",sum);
					}else{
						break;
					}
					
				}
				printf("\n");
			}else{
				printf("??????????????????\n");
			}
			break;
		}
		case 7:{//????????????????????????? 
			if(!ListLength_L(L)){
				printf("???????????????????????\n"); 
			}else{
				ShowAll(L);
			}
			break;
		}
		case 8:{//????????????????? 
			char flag;
			printf("??????????????????????? (y/other) ??");
			scanf("%c",&flag);
			fflush(stdin);
			if(flag == 'y' || flag == 'Y'){
				if(ClearList(L)){
					printf("????????????\n");
				}else{//??????BUG????? 
					printf("?????????????????????BUG??\n");
				}
			}
			break;
		} 
		case 9:{//???????????? 
			char flag;
			fflush(stdin);
			printf("??????????????????????? (y/other) ??");
			scanf("%c",&flag);
			fflush(stdin);
			if(flag == 'y' || flag == 'Y'){
				if(DestoryList_L(L)){
					printf("??????????\n");
					InitFlag--;
				}else{//??????BUG????? 
					printf("????????????????????BUG??\n");
				}
			}
			break;
		}
	}
}


//-----------------?????????????------------------------------- 

Status InitList_LV1(LinkList &L,int n){
	L = new LNode;
	LinkList p;
	int i;
	for(i = 0; i < n;i++){
		p = new LNode;
		fflush(stdin);
		scanf("%s",&(p->data.num));
		fflush(stdin);
		p->data.grade = 80;
		p->next = L->next;
		L->next = p;
	}
	return OK;
}

Status InitList_LV2(LinkList &L,int n){
	L = new LNode;
	LinkList p;
	LinkList r;
	int i;
	L->next = NULL;
	r = L;
	for(i = 0; i < n;i++){
		p = new LNode;
		fflush(stdin);
		scanf("%s",&p->data.num);
		fflush(stdin);
		p->data.grade = 80;
		r->next = p;
		r = p;
	}
	return OK;
}

void CrushList_L(LinkList &L,LinkList &L2,char n){
	if(n == 'Y' || n == 'y'){
		ClearListN(L);
		ConnectionList_L(L,L2);
		DestoryList_LN(L2);
	}else{
		DestoryList_LN(L2);
		InitFlag--;
	}
}

void ConnectionList_L(LinkList &L,LinkList &L2){//????????????BUG?????????  
	LinkList p = L2->next;
	int i;
	for(int i = 1; i <= ListLength_L(L2);p = p->next){
		i += ListInsertRandom_L(L,p->data);
	}
	DestoryList_L(L2);
	InitFlag--;
	printf("???????????§¹??\n");
}

Status InitList_L(LinkList &L){	//?????????????????????  ********
	L=new LNode;
	L->next=NULL;
	return OK;
}

void DestoryList_LN(LinkList &L){//???????					********
	LinkList p;
		while(L)
		{
			p=L;
			L=L->next;
			delete p;
		}
}

Status DestoryList_L(LinkList &L){//???????					********
	LinkList p;
		while(L)
		{
			p=L;
			L=L->next;
			delete p;
		}
	return OK;
}

void ClearListN(LinkList &L){//??????????????? 				********
	LinkList p,q;
	p=L->next;
	while(p){
		q=p->next;
		delete p;
		p=q;
	}
	L->next=NULL;
	return ;
}

Status ClearList(LinkList &L){//??????????????? 				********
	LinkList p,q;
	p=L->next;
	while(p){
		q=p->next;
		delete p;
		p=q;
	}
	L->next=NULL;
	return OK;
}

int ListLength_L(LinkList L){//?????????? 					********
	int i = 0;
	LinkList p;
	p=L->next;
	while(p){
		i++;
		p=p->next;
	}
	return i;
}

int ListEmpty(LinkList L){//????????????? 					********
	if(L->next)
		return 0;
	else
		return 1;
}

Status GetElem_L(LinkList L,int i,ElemType &tmp){//??			********
	LinkList p = L->next;
	int j =1;
	while(p && j <i){
		p = p->next;
		j++;
	}
	if(!p || i > j){
		return ERROR;
	}else{
		tmp = p->data;
		return OK;
	}
}

LinkList LocateElem_L_EX(LinkList L,ElemType e,int &n){//?????—¤?????????????????????????BUG????????? 
	int numbers=1;
	LinkList p = L->next;
	while(p && (strcmp(p->data.name,e.name) != 0)){
		p = p->next;
		numbers++;
	}
	if(p){
		n = numbers;
		return p;
	}else{
		return NULL;
	}
}

Status ListInsertRandom_L(LinkList &L,ElemType e){//??????????????? 
	LinkList p = L;
	LinkList s = new LNode;
	while(p->next){
		p = p->next;
	}
	s->data = e;
	s->next = p->next;
	p->next = s; 
	return OK;
}

Status ListInsert_L(LinkList &L,int i,ElemType e){//???????    ******** 
	LinkList p = L;
	LinkList s = new LNode;
	int j = 0;
	while(p && j < i-1){
		p=p->next;
		j++;
	}
	if(!p || j > i-1){
		return ERROR;
	}
	s->data = e;
	s->next = p->next;
	p->next = s;
	return OK;
}

Status ListDelete_L(LinkList &L,int i,ElemType &e){//???????	******** 
	LinkList p = L;
	LinkList q = new LNode;
	int j = 0;
	while(p->next && j<i-1){
		p = p->next;
		j++;
	}
	if(!(p->next) || j>i-1){
		return ERROR;
	}
	q = p->next;
	p->next = q->next;
	e = q->data;
	delete q;
	return OK;	
} 

void ShowAll(LinkList &L){//?????? 							********
	LinkList p = L->next;
	int i = 1;
	printf("??????????:\n");
	while(p){
		printf("?????%d??????: \n????: %s,???: %s,???: %d\n",i,p->data.name,p->data.num,p->data.grade);
		p = p->next;
		i++;
	}
	return;
}

