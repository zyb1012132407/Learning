#include <stdio.h>
#include <cstdlib>
#include <stdlib.h>
typedef struct{
	int *elem;
	int length;
}SqList;

typedef int Status;
#define OK 1
#define ERROR 0
#define MAXSIZE 100

void mainTest(SqList &L);
void DestoryList(SqList &L);
void ClearList(SqList &L);
void ShowAll(SqList &L);
void controller(SqList &L,int x);
int GetLength(SqList &L);
int IsEmpty(SqList &L);
int GetElem(SqList &L,int i);
int LocateElem(SqList &L,int e);
Status ListInsert(SqList &L,int e);
Status InitList_Sq(SqList &L);
Status ListInsert_Sq(SqList &L,int i,int e);
Status ListDelete_Sq(SqList &L,int i);

int main(){
	SqList L;
	mainTest(L);
	return 0;
}

void mainTest(SqList &L){
	int x=0;
	while(1){
	printf("????????????\n");
	printf("-------------------------\n");
	printf("??????????????????????\n");
	printf("1??????????\n");
	printf("2?????????¦Ë???\n");
	printf("3?????????¦Ë???\n");
	printf("4??????????¦Ë???\n");
	printf("5??????????¦Ë???\n");
	printf("6???????????????\n"); 
	printf("7?????????????\n");
	printf("8?????\n");
	printf("-------------------------\n");
	printf("?????????????");
	scanf("%d",&x);
	if(x >=1 && x <=7){
		printf("-------------------------\n");
		controller(L,x);
		printf("-------------------------\n");
	}else if(x == 8){
		printf("???????");
		break;
	}else{
		printf("????????????????");
	}
	system("pause");
	system("cls");
	}
	
	return;

}

void controller(SqList &L,int x){
	switch(x){
		
		case 1: {
			if(InitList_Sq(L)){
				printf("????????????????????????????\n");
				break;
			}else{
			 	printf("?????????????????????????????\n"); 
			}
			return;
		}
		
		
		case 2:{
			int tmp=1;
			char flag='y';
			while(flag== 'y' || flag == 'Y'){
				if(L.length >= MAXSIZE){
					printf("???????????????\n");
					return; 
				} 
				printf("????????????????");
				scanf("%d",&tmp);
				if(ListInsert(L,tmp)){
					printf("???????\n");
				}else{
					printf("??????????????????????øA???????!\n");
				}
				printf("?????????????????(y/other)  :");
				fflush(stdin);
				scanf("%c",&flag);
				printf("\n");
			}
			return;
		}
		
		case 3:{
			int tmp=1;
			int location;
			char flag = 'y';
			while(flag == 'y' ||  flag == 'Y'){
				if(L.length >= MAXSIZE){
					printf("???????????????\n");
					return; 
				} 
				printf("????????????????");
				scanf("%d",&tmp);
				printf("????????????¦Ë???");
				scanf("%d",&location); 
				if(ListInsert_Sq(L,location,tmp)){
					printf("???????\n");
				}else{
					printf("??????????????????????øA???????!\n");
				}
				printf("?????????????????(y/other)  :");
				fflush(stdin);
				scanf("%c",&flag);
			}
			return;
		}
		
		case 4:{
			int location;
			printf("??????????????¦Ë??:");
			scanf("%d",&location);
			if(ListDelete_Sq(L,location)){
				printf("????????\n");
			}else{
				printf("??????????????????????øA???????!\n");
			}
			return;
		}
		
		case 5:{
			int location=0;
			int tmp=0;
			printf("??????????¦Ë???");
			scanf("%d",&location);
			tmp=GetElem(L,location);
			if(tmp){
				printf("???????????????%d!\n",tmp);
			}else{
				printf("??????????§Õ??????\n");
			}
			return;
		}
		
		case 6:{
			int e;
			int result;
			printf("???????????????");
			scanf("%d",&e);
			if(result = LocateElem(L,e)){
				printf("????????????¦Ë???%d\n",result);
			}else{
				printf("??????????????????\n");
			}
			return;
		}
		
		case 7:{
			ShowAll(L);
			return;
		}
		
	}
}

Status InitList_Sq(SqList &L){
	L.elem = new int[100];
	if(!L.elem)
		exit(1);
	L.length = 0;
	return OK;
}

void DestoryList(SqList &L){
	if(L.elem)
		delete[] L.elem;
}

void ClearList(SqList &L){
	L.length = 0;
}

void ShowAll(SqList &L){
	int i;
	printf("?????????????????\n");
	for(i=0;i<L.length;i++){
		printf("??%d??????????%d??\n",i+1,L.elem[i]);
	}
	return;
}

int GetLength(SqList &L){
	return L.length;
}

int IsEmpty(SqList &L){
	if(L.length == 0){
		return OK;
	}else{
		return ERROR;
	}
}

int GetElem(SqList L,int i){
	if(i < 1 || i >L.length)
		return ERROR;
	return L.elem[i-1];
}

int LocateElem(SqList L,int e){
	int i = 0;
	for(i = 0; i < L.length;i++){
		if(L.elem[i] == e){
			return i+1;
		}
	}
	return ERROR;
}

Status ListInsert(SqList &L,int e){
	if(L.length==MAXSIZE)
		return ERROR;
	L.elem[L.length] = e;
    L.length++;
	return OK;
}

Status ListInsert_Sq(SqList &L,int i,int e){
	int j;
	if(i < 1 || i >L.length+1)
		return ERROR;
	if(L.length==MAXSIZE)
		return ERROR;
	L.length++;
	for(j = L.length-1;j>i-1;j--){
		L.elem[j] = L.elem[j-1];
	}
	L.elem[j] = e;
	return OK;
}

Status ListDelete_Sq(SqList &L,int i){
	int j;
	if(i < 1 || i>L.length){
		return ERROR;
	}
	for(j = i-1;j < L.length-1;j++){
		L.elem[j] = L.elem[j+1];
	}
	L.length--;
	return OK;
}

